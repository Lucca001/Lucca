#Cap 10 - Gatilhos Mágicos - Exercendo a Automação

DECLARE
   v_authority VARCHAR2(20);
BEGIN
   EXECUTE IMMEDIATE 'CREATE TABLE tb_role (
      id   NUMBER GENERATED BY DEFAULT AS IDENTITY,
      authority VARCHAR2(20) NOT NULL,
      CONSTRAINT pk_tb_role PRIMARY KEY (id)
   )';
   FOR i IN 1..5 LOOP
      CASE i
         WHEN 1 THEN
            v_authority := 'MEDICO';
         WHEN 2 THEN
            v_authority := 'EMPRESA';
         WHEN 3 THEN
            v_authority := 'AUXILIAR';
         WHEN 4 THEN
            v_authority := 'COLABORADOR';
         WHEN 5 THEN
            v_authority := 'PACIENTE';
      END CASE;
      EXECUTE IMMEDIATE 'INSERT INTO tb_role (authority) VALUES (:1)' USING v_authority;
   END LOOP;
END;

DECLARE
  v_count NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_count FROM tb_account;
  DBMS_OUTPUT.PUT_LINE('O número de contas cadastradas é: ' || v_count);
END;

CREATE OR REPLACE TRIGGER tr_valida_email
BEFORE INSERT ON tb_account
FOR EACH ROW
DECLARE
    v_email tb_account.email%TYPE;
BEGIN
    -- Verifica se o e-mail já existe na tabela
    SELECT email INTO v_email
    FROM tb_account
    WHERE email = :NEW.email;
    
    -- Se o e-mail já existe, retorna um erro
    IF v_email IS NOT NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'O e-mail informado já está sendo utilizado!');
    END IF;
END;

CREATE OR REPLACE TRIGGER tr_tb_appointment
BEFORE INSERT ON tb_appointment
FOR EACH ROW
BEGIN
  SELECT seq_appointment_id.nextval INTO :new.appointment_id FROM dual;
END;